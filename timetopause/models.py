from django.db import models
from django.contrib.auth.models import User
from cloudinary.models import CloudinaryField

STATUS = ((0, "Draft"), (1, "Published"))


class Post(models.Model):
    """
    This Post class is setting up the post model for
    how it will appear on the admin panel as well as
    how it will display to the user and will
    also show what field type each field will be also
    and what criteria must be met for some of them
    to be accepted.
    :model: `author.User`
    """
    title = models.CharField(max_length=200, unique=True)
    slug = models.SlugField(max_length=200, unique=True)
    author = models.ForeignKey(
        User, on_delete=models.CASCADE,  related_name="blog_posts")
    updated_on = models.DateTimeField(auto_now=True)
    content = models.TextField()
    featured_image = CloudinaryField('image', default='placeholder')
    excerpt = models.TextField(blank=True)
    created_on = models.DateTimeField(auto_now_add=True)
    status = models.IntegerField(choices=STATUS, default=0)
    likes = models.ManyToManyField(User, related_name="blog_likes", blank=True)

    class Meta:
        ordering = ['-created_on']

    def __str__(self):
        return f" {self.title} | {self.author}"

    def number_of_likes(self):
        return self.likes.count()



class Comment(models.Model):
    """
    The Comment Model is showing which fields will be
    completed and displayed when a user leaves a comment
    under the post including those that are autogenerated
    and those that required compeltion by the user.
    :model: `author.User`
    :model: `post.Post`
    """
    post = models.ForeignKey(
        Post, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='commenter')
    content = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    approved = models.BooleanField(default=False)

    class Meta:
        ordering = ['created_on']

    def __str__(self):
        return f"Comment {self.content} by {self.author}"
